// tslint:disable
/**
 * Todo-List API
 * This is a sample todo-list server.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface MainAddTodoReq
 */
export interface MainAddTodoReq {
    /**
     * 
     * @type {string}
     * @memberof MainAddTodoReq
     */
    content?: string;
}
/**
 * 
 * @export
 * @interface MainTodo
 */
export interface MainTodo {
    /**
     * 
     * @type {string}
     * @memberof MainTodo
     */
    content?: string;
    /**
     * 
     * @type {number}
     * @memberof MainTodo
     */
    created_at?: number;
    /**
     * 
     * @type {boolean}
     * @memberof MainTodo
     */
    done?: boolean;
    /**
     * 
     * @type {string}
     * @memberof MainTodo
     */
    id?: string;
}
/**
 * 
 * @export
 * @interface MainUpdateTodoReq
 */
export interface MainUpdateTodoReq {
    /**
     * 
     * @type {string}
     * @memberof MainUpdateTodoReq
     */
    content?: string;
    /**
     * 
     * @type {boolean}
     * @memberof MainUpdateTodoReq
     */
    done?: boolean;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * get the list of todos
         * @summary Show all todos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/todos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * delete a single todo by ID
         * @summary Delete a todo
         * @param {string} id Todo ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosIdDelete: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling todosIdDelete.');
            }
            const localVarPath = `/todos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get the single todo by ID
         * @summary Show a single todo
         * @param {string} id TODO ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling todosIdGet.');
            }
            const localVarPath = `/todos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * update a single todo by ID
         * @summary Update a todo
         * @param {string} id Todo ID
         * @param {MainUpdateTodoReq} request Todo Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosIdPut: async (id: string, request: MainUpdateTodoReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling todosIdPut.');
            }
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling todosIdPut.');
            }
            const localVarPath = `/todos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add a new todo
         * @param {MainAddTodoReq} request Todo Content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosPost: async (request: MainAddTodoReq, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'request' is not null or undefined
            if (request === null || request === undefined) {
                throw new RequiredError('request','Required parameter request was null or undefined when calling todosPost.');
            }
            const localVarPath = `/todos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof request !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(request !== undefined ? request : {}) : (request || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * get the list of todos
         * @summary Show all todos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async todosGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MainTodo>>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).todosGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * delete a single todo by ID
         * @summary Delete a todo
         * @param {string} id Todo ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async todosIdDelete(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).todosIdDelete(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * get the single todo by ID
         * @summary Show a single todo
         * @param {string} id TODO ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async todosIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MainTodo>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).todosIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * update a single todo by ID
         * @summary Update a todo
         * @param {string} id Todo ID
         * @param {MainUpdateTodoReq} request Todo Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async todosIdPut(id: string, request: MainUpdateTodoReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).todosIdPut(id, request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Add a new todo
         * @param {MainAddTodoReq} request Todo Content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async todosPost(request: MainAddTodoReq, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MainTodo>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).todosPost(request, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * get the list of todos
         * @summary Show all todos
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosGet(options?: any): AxiosPromise<Array<MainTodo>> {
            return DefaultApiFp(configuration).todosGet(options).then((request) => request(axios, basePath));
        },
        /**
         * delete a single todo by ID
         * @summary Delete a todo
         * @param {string} id Todo ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosIdDelete(id: string, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).todosIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * get the single todo by ID
         * @summary Show a single todo
         * @param {string} id TODO ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosIdGet(id: string, options?: any): AxiosPromise<MainTodo> {
            return DefaultApiFp(configuration).todosIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * update a single todo by ID
         * @summary Update a todo
         * @param {string} id Todo ID
         * @param {MainUpdateTodoReq} request Todo Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosIdPut(id: string, request: MainUpdateTodoReq, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).todosIdPut(id, request, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add a new todo
         * @param {MainAddTodoReq} request Todo Content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        todosPost(request: MainAddTodoReq, options?: any): AxiosPromise<MainTodo> {
            return DefaultApiFp(configuration).todosPost(request, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * get the list of todos
     * @summary Show all todos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public todosGet(options?: any) {
        return DefaultApiFp(this.configuration).todosGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * delete a single todo by ID
     * @summary Delete a todo
     * @param {string} id Todo ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public todosIdDelete(id: string, options?: any) {
        return DefaultApiFp(this.configuration).todosIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get the single todo by ID
     * @summary Show a single todo
     * @param {string} id TODO ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public todosIdGet(id: string, options?: any) {
        return DefaultApiFp(this.configuration).todosIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * update a single todo by ID
     * @summary Update a todo
     * @param {string} id Todo ID
     * @param {MainUpdateTodoReq} request Todo Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public todosIdPut(id: string, request: MainUpdateTodoReq, options?: any) {
        return DefaultApiFp(this.configuration).todosIdPut(id, request, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add a new todo
     * @param {MainAddTodoReq} request Todo Content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public todosPost(request: MainAddTodoReq, options?: any) {
        return DefaultApiFp(this.configuration).todosPost(request, options).then((request) => request(this.axios, this.basePath));
    }

}


